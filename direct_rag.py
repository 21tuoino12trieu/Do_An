from vector_store import VectorStore
import sqlite3
from openai import OpenAI
import google.generativeai as genai
from config import DATABASE_PATH
from prompts import (
    QUERY_CLARIFICATION_PROMPT,
    QUERY_CLASSIFICATION_PROMPT,
    QUERY_DOMAIN_CLASSIFICATION_PROMPT,
    QUERY_UNRELATED_HANDLE_PROMPT,
    GENERAL_FIELD_IDENTIFICATION_PROMPT,
    EXTRACT_PRODUCT_NAME_PROMPT,
    SPECIFIC_FIELDS_IDENTIFICATION_PROMPT,
    SQL_GENERATION_PROMPT,
    GENERAL_RESPONSE_GENERATION_PROMPT,
    SPECIFIC_VECTOR_RESPONSE_PROMPT,
    SPECIFIC_SQL_RESPONSE_PROMPT,
)


class DirectRAG:
    """
    H·ªá th·ªëng RAG g·ªçi tr·ª±c ti·∫øp qua OpenAI Client - phi√™n b·∫£n c·∫£i ti·∫øn
    """

    def __init__(self):
        # Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi SQLite
        self.sql_conn = sqlite3.connect(DATABASE_PATH, check_same_thread=False)

        # Kh·ªüi t·∫°o Vector Store
        self.vector_store = VectorStore()
        self.collections = self.vector_store.load_collections()
        self.embedding_model = self.vector_store._load_embedding_model()
        self.reranker = self.vector_store.reranker

        genai.configure(api_key="AIzaSyBLEHXcGtxM5EKA2vE53ooMddz2ELYVatM")

        # Kh·ªüi t·∫°o OpenAI client
        self.client = OpenAI(
            api_key="sk-DA3F9KX5B3sWaspdA1B9Cc9069Ab416fAa01C50316Ac17Ff",
            base_url="https://api.sv2.llm.ai.vn/v1"
        )

        print("DirectRAG ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng")

    def call_openai(self, prompt, temperature=0.1, model="gpt-4o", stream=False, callback=None):
        """G·ªçi OpenAI API"""
        try:
            response = self.client.chat.completions.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                temperature=temperature,
                stream=stream,
            )

            if stream and callback:
                # X·ª≠ l√Ω streaming n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
                full_response = ""
                for chunk in response:
                    if chunk.choices and len(chunk.choices) > 0:
                        content = chunk.choices[0].delta.content
                        if content:
                            full_response += content
                            callback(content)
                return full_response
            else:
                # X·ª≠ l√Ω kh√¥ng streaming nh∆∞ tr∆∞·ªõc
                return response.choices[0].message.content.strip()
        except Exception as e:
            print(f"L·ªói khi g·ªçi OpenAI API: {e}")
            return f"Kh√¥ng th·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ AI: {str(e)}"

        # try:
        #     # C·∫•u h√¨nh model
        #     generation_config = {
        #         "temperature": temperature,
        #         "top_p": 0.95,
        #         "top_k": 0,
        #         "max_output_tokens": 2048,
        #     }
        #
        #     # Kh·ªüi t·∫°o model
        #     model = genai.GenerativeModel(model_name=model,
        #                                   generation_config=generation_config)
        #
        #     # G·ªçi API
        #     response = model.generate_content(prompt)
        #
        #     # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        #     return response.text
        # except Exception as e:
        #     print(f"L·ªói khi g·ªçi Gemini API: {e}")
        #     return f"Kh√¥ng th·ªÉ nh·∫≠n ph·∫£n h·ªìi t·ª´ AI: {str(e)}"

    def clarify_query(self, user_query):
        """L√†m r√µ c√¢u h·ªèi ng∆∞·ªùi d√πng"""
        prompt = QUERY_CLARIFICATION_PROMPT.format(user_query=user_query)
        return self.call_openai(prompt, temperature=0.1)

    def classify_query_domain(self, clarified_query):
        """Ph√¢n lo·∫°i c√¢u h·ªèi thu·ªôc domain thi·∫øt b·ªã di ƒë·ªông hay kh√¥ng"""
        formatted_prompt = QUERY_DOMAIN_CLASSIFICATION_PROMPT.format(clarified_query=clarified_query)
        response = self.call_openai(formatted_prompt, temperature=0.1)

        # ƒê·∫£m b·∫£o k·∫øt qu·∫£ tr·∫£ v·ªÅ l√† m·ªôt trong hai gi√° tr·ªã h·ª£p l·ªá
        response = response.strip().upper()
        if response not in ["RELATED", "UNRELATED"]:
            # M·∫∑c ƒë·ªãnh l√† RELATED n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c r√µ r√†ng
            return "RELATED"

        return response

    def handle_unrelated_query(self, original_query, clarified_query):
        """X·ª≠ l√Ω c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn thi·∫øt b·ªã di ƒë·ªông"""
        prompt = QUERY_UNRELATED_HANDLE_PROMPT.format(clarified_query=clarified_query)
        response = self.call_openai(prompt, temperature=1)

        return {
            "original_query": original_query,
            "clarified_query": clarified_query,
            "query_type": "UNRELATED",
            "response": response
        }

    def classify_query(self, clarified_query):
        """Ph√¢n lo·∫°i c√¢u h·ªèi theo c·∫•u tr√∫c m·ªõi: GENERAL ho·∫∑c SPECIFIC-XXX"""
        prompt = QUERY_CLASSIFICATION_PROMPT.format(clarified_query=clarified_query)
        initial_classification = self.call_openai(prompt, temperature=0.1)
        return initial_classification

    def identify_general_field(self, clarified_query):
        """X√°c ƒë·ªãnh tr∆∞·ªùng t·ªëi ∆∞u nh·∫•t cho c√¢u h·ªèi chung chung"""
        prompt = GENERAL_FIELD_IDENTIFICATION_PROMPT.format(clarified_query=clarified_query)
        return self.call_openai(prompt, temperature=0.1).strip()

    def extract_product_name(self, clarified_query):
        """Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi c·ª• th·ªÉ"""
        prompt = EXTRACT_PRODUCT_NAME_PROMPT.format(clarified_query=clarified_query)
        return self.call_openai(prompt, temperature=0.1).strip()

    def identify_specific_fields(self, clarified_query):
        """X√°c ƒë·ªãnh c√°c tr∆∞·ªùng c·∫ßn l·∫•y cho c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m c·ª• th·ªÉ"""
        prompt = SPECIFIC_FIELDS_IDENTIFICATION_PROMPT.format(clarified_query=clarified_query)
        response = self.call_openai(prompt, temperature=0.1).strip()

        if response.lower() == "all":
            return ["product_info", "warranty", "technical", "feature", "content", "full_promotion"]
        else:
            return [field.strip() for field in response.split(",")]

    def execute_sql_query(self, clarified_query, product_name):
        """Th·ª±c hi·ªán truy v·∫•n SQL"""
        # T·∫°o c√¢u l·ªánh SQL t·ª´ c√¢u h·ªèi v√† t√™n s·∫£n ph·∫©m
        prompt = SQL_GENERATION_PROMPT.format(
            clarified_query=clarified_query,
            product_name=product_name
        )
        sql_query = self.call_openai(prompt, temperature=0.1)

        # Lo·∫°i b·ªè c√°c ƒë·ªãnh d·∫°ng kh√¥ng c·∫ßn thi·∫øt n·∫øu c√≥
        if "```sql" in sql_query:
            sql_query = sql_query.split("```sql")[1].split("```")[0].strip()
        elif "```" in sql_query:
            sql_query = sql_query.split("```")[1].strip()

        print(f"Generated SQL query: {sql_query}")

        # Th·ª±c thi c√¢u l·ªánh SQL
        cursor = self.sql_conn.cursor()
        try:
            cursor.execute(sql_query)
            columns = [col[0] for col in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]
            return results
        except Exception as e:
            error_message = f"SQL Error: {str(e)}"
            print(error_message)
            return []
        finally:
            cursor.close()

    def perform_semantic_search(self, query, field_name, top_k=5):
        """Th·ª±c hi·ªán t√¨m ki·∫øm ng·ªØ nghƒ©a tr√™n m·ªôt tr∆∞·ªùng c·ª• th·ªÉ"""
        try:
            print(f"\nüîç T√¨m ki·∫øm ng·ªØ nghƒ©a trong {field_name} v·ªõi query: {query}")

            # T·∫°o embedding cho query
            embedding_result = self.embedding_model.encode(query, max_length=2048)
            query_embedding = embedding_result["dense_vecs"]

            # ƒê·∫£m b·∫£o collection ƒë∆∞·ª£c t·∫£i
            if field_name not in self.collections:
                print(f"Field {field_name} kh√¥ng t·ªìn t·∫°i trong collections")
                return []

            collection = self.collections[field_name]
            search_params = {"metric_type": "IP", "params": {"ef": 1024}}

            # Th·ª±c hi·ªán t√¨m ki·∫øm v·ªõi embedding g·ªëc
            results = collection.search(
                data=[query_embedding],
                anns_field="embedding",
                param=search_params,
                limit=top_k,
                output_fields=["product_name", "chunk_id", "text_data"]
            )

            formatted_results = []
            for hit in results[0]:
                formatted_results.append({
                    "product_name": hit.entity.get("product_name"),
                    "chunk_id": hit.entity.get("chunk_id"),
                    "text_data": hit.entity.get("text_data"),
                    "score": hit.score
                })

            print(f"‚úÖ T√¨m th·∫•y {len(formatted_results)} k·∫øt qu·∫£ t·ª´ {field_name}")
            return formatted_results

        except Exception as e:
            print(f"‚ùå L·ªói trong perform_semantic_search: {e}")
            return []

    def handle_general_query(self, original_query, clarified_query):
        """X·ª≠ l√Ω c√¢u h·ªèi chung chung v·ªÅ nhi·ªÅu s·∫£n ph·∫©m"""
        # 1. X√°c ƒë·ªãnh tr∆∞·ªùng t·ªëi ∆∞u ƒë·ªÉ t√¨m ki·∫øm
        optimal_field = self.identify_general_field(clarified_query)
        print(f"Tr∆∞·ªùng t·ªëi ∆∞u cho c√¢u h·ªèi chung: {optimal_field}")

        # 2. Th·ª±c hi·ªán t√¨m ki·∫øm ng·ªØ nghƒ©a
        search_results = self.perform_semantic_search(clarified_query, optimal_field, top_k=5)

        if not search_results:
            return {
                "original_query": original_query,
                "clarified_query": clarified_query,
                "query_type": "GENERAL",
                "response": f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.",
                "field": optimal_field,
                "raw_results": []
            }

        # 3. T·ªï ch·ª©c k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã
        formatted_results = ""
        for i, result in enumerate(search_results):
            formatted_results += f"--- S·∫£n ph·∫©m {i + 1}: {result['product_name']} ---\n"
            formatted_results += f"Th√¥ng tin: {result['text_data']}\n\n"

        # 4. T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
        response = self.call_openai(
            GENERAL_RESPONSE_GENERATION_PROMPT.format(
                original_query=original_query,
                clarified_query=clarified_query,
                field_name=optimal_field,
                results=formatted_results
            ),
            temperature=1
        )

        return {
            "original_query": original_query,
            "clarified_query": clarified_query,
            "query_type": "GENERAL",
            "response": response,
            "field": optimal_field,
            "raw_results": search_results
        }

    def handle_specific_vector_query(self, original_query, clarified_query):
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ (d√πng vector search)"""
        # 1. Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi
        product_name = self.extract_product_name(clarified_query)
        print(f"T√™n s·∫£n ph·∫©m ƒë∆∞·ª£c tr√≠ch xu·∫•t: {product_name}")

        # 2. X√°c ƒë·ªãnh c√°c tr∆∞·ªùng th√¥ng tin c·∫ßn l·∫•y
        fields = self.identify_specific_fields(clarified_query)
        print(f"C√°c tr∆∞·ªùng th√¥ng tin c·∫ßn l·∫•y: {fields}")

        # 3. T√¨m ki·∫øm s·∫£n ph·∫©m theo t√™n ƒë·ªÉ x√°c nh·∫≠n
        product_search_results = self.perform_semantic_search(product_name, "product_name", top_k=3)

        if not product_search_results:
            return {
                "original_query": original_query,
                "clarified_query": clarified_query,
                "query_type": "SPECIFIC-VECTOR",
                "response": f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m {product_name}.",
                "product_name": product_name,
                "fields": fields,
                "raw_results": []
            }

        # 4. Ch·ªçn s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t (ƒëi·ªÉm cao nh·∫•t)
        best_match = product_search_results[0]
        actual_product_name = best_match["product_name"]
        print(f"S·∫£n ph·∫©m ph√π h·ª£p nh·∫•t: {actual_product_name}")

        # 5. Thu th·∫≠p th√¥ng tin t·ª´ c√°c tr∆∞·ªùng d·ªØ li·ªáu c·∫ßn thi·∫øt
        field_results = {}
        for field in fields:
            try:
                collection = self.collections[field]

                # Truy v·∫•n tr·ª±c ti·∫øp s·ª≠ d·ª•ng t√™n s·∫£n ph·∫©m ch√≠nh x√°c
                query_expr = f'product_name == "{actual_product_name}"'  # ƒêi·ªÅu ki·ªán ch√≠nh x√°c
                print(f"Truy v·∫•n tr·ª±c ti·∫øp collection {field} v·ªõi ƒëi·ªÅu ki·ªán: {query_expr}")

                results = collection.query(
                    expr=query_expr,
                    output_fields=["product_name", "chunk_id", "text_data"]
                )

                print(f"T√¨m th·∫•y {len(results)} k·∫øt qu·∫£ t·ª´ collection {field}")

                if results:
                    # L·∫•y d·ªØ li·ªáu t·ª´ k·∫øt qu·∫£ ƒë·∫ßu ti√™n
                    field_results[field] = results[0]["text_data"]
                else:
                    print(f"Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho {field} v·ªõi product_name={actual_product_name}")

                    # Th·ª≠ ph∆∞∆°ng ph√°p thay th·∫ø: t√¨m g·∫ßn ƒë√∫ng (n·∫øu c·∫ßn)
                    fallback_expr = f'product_name like "%{actual_product_name}%"'
                    fallback_results = collection.query(
                        expr=fallback_expr,
                        output_fields=["product_name", "chunk_id", "text_data"],
                        limit=1
                    )

                    if fallback_results:
                        field_results[field] = fallback_results[0]["text_data"]
                        print(f"T√¨m th·∫•y k·∫øt qu·∫£ g·∫ßn ƒë√∫ng: {fallback_results[0]['product_name']}")
                    else:
                        field_results[field] = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin {field} cho s·∫£n ph·∫©m {actual_product_name}"

            except Exception as e:
                print(f"L·ªói khi truy v·∫•n collection {field}: {e}")
                field_results[field] = f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin {field} (l·ªói: {str(e)})"

        # 6. T·ªï ch·ª©c k·∫øt qu·∫£ ƒë·ªÉ hi·ªÉn th·ªã
        formatted_results = f"--- Th√¥ng tin s·∫£n ph·∫©m: {actual_product_name} ---\n\n"
        for field, text in field_results.items():
            field_display = {
                "product_info": "Th√¥ng tin s·∫£n ph·∫©m",
                "warranty": "B·∫£o h√†nh",
                "technical": "Th√¥ng s·ªë k·ªπ thu·∫≠t",
                "feature": "T√≠nh nƒÉng n·ªïi b·∫≠t",
                "content": "M√¥ t·∫£ chi ti·∫øt",
                "full_promotion": "Khuy·∫øn m√£i"
            }.get(field, field.replace("_", " ").title())

            formatted_results += f"### {field_display}:\n{text}\n\n"

        # 7. T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ k·∫øt qu·∫£ t√¨m ki·∫øm
        response = self.call_openai(
            SPECIFIC_VECTOR_RESPONSE_PROMPT.format(
                original_query=original_query,
                clarified_query=clarified_query,
                product_name=actual_product_name,
                fields=", ".join(fields),
                results=formatted_results
            ),
            temperature=0.1
        )

        return {
            "original_query": original_query,
            "clarified_query": clarified_query,
            "query_type": "SPECIFIC-VECTOR",
            "response": response,
            "product_name": actual_product_name,
            "fields": fields,
            "raw_results": field_results
        }

    def handle_specific_sql_query(self, original_query, clarified_query):
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ (d√πng SQL query)"""
        # 1. Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi
        product_name = self.extract_product_name(clarified_query)
        print(f"T√™n s·∫£n ph·∫©m ƒë∆∞·ª£c tr√≠ch xu·∫•t (SQL): {product_name}")

        # 2. X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi SQL (v·ªÅ ƒë·ªãa ch·ªâ, gi√°, ho·∫∑c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m)
        sql_query_type = self._identify_sql_query_type(clarified_query)
        print(f"Lo·∫°i c√¢u h·ªèi SQL: {sql_query_type}")

        # 3. Th·ª±c hi·ªán truy v·∫•n SQL
        sql_results = self.execute_sql_query(clarified_query, product_name)

        if not sql_results:
            return {
                "original_query": original_query,
                "clarified_query": clarified_query,
                "query_type": "SPECIFIC-SQL",
                "sql_query_type": sql_query_type,  # Th√™m lo·∫°i c√¢u h·ªèi SQL c·ª• th·ªÉ
                "response": f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin {self._get_sql_type_description(sql_query_type)} s·∫£n ph·∫©m {product_name}.",
                "product_name": product_name,
                "raw_results": []
            }

        # 4. T·ªï ch·ª©c k·∫øt qu·∫£ SQL ƒë·ªÉ hi·ªÉn th·ªã
        formatted_results = self._format_sql_results(sql_query_type, product_name, sql_results)

        # 5. T·∫°o c√¢u tr·∫£ l·ªùi t·ª´ k·∫øt qu·∫£ SQL
        response = self.call_openai(
            SPECIFIC_SQL_RESPONSE_PROMPT.format(
                original_query=original_query,
                clarified_query=clarified_query,
                product_name=product_name,
                results=formatted_results
            ),
            temperature=0.7
        )

        # 6. Ki·ªÉm tra xem c√≥ b·∫£n ƒë·ªì kh√¥ng ƒë·ªÉ b√°o cho giao di·ªán ng∆∞·ªùi d√πng
        has_map = any("map" in result and result["map"] and result["map"] != "None" for result in sql_results)

        return {
            "original_query": original_query,
            "clarified_query": clarified_query,
            "query_type": "SPECIFIC-SQL",
            "sql_query_type": sql_query_type,  # Th√™m lo·∫°i c√¢u h·ªèi SQL c·ª• th·ªÉ
            "response": response,
            "product_name": product_name,
            "has_map": has_map,  # Th√™m flag cho bi·∫øt c√≥ b·∫£n ƒë·ªì hay kh√¥ng
            "raw_results": sql_results
        }

    def _identify_sql_query_type(self, query):
        """X√°c ƒë·ªãnh lo·∫°i c√¢u h·ªèi SQL: ƒë·ªãa ch·ªâ, gi√° ho·∫∑c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m"""
        prompt = """
        Ph√¢n lo·∫°i c√¢u h·ªèi sau v√†o m·ªôt trong c√°c lo·∫°i:

        "{query}"
        C√°c lo·∫°i:
        1. ADDRESS: C√¢u h·ªèi v·ªÅ ƒë·ªãa ch·ªâ, c·ª≠a h√†ng, n∆°i b√°n
        2. PRICE: C√¢u h·ªèi v·ªÅ gi√° c·∫£ c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ

        Tr·∫£ v·ªÅ ch·ªâ m·ªôt trong ba gi√° tr·ªã: ADDRESS, PRICE 
        """
        result = self.call_openai(prompt.format(query=query), temperature=0.1)
        result = result.strip().upper()
        if result not in ["ADDRESS", "PRICE"]:
            # M·∫∑c ƒë·ªãnh l√† ADDRESS n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
            return "ADDRESS"
        return result

    def _get_sql_type_description(self, sql_query_type):
        """Tr·∫£ v·ªÅ m√¥ t·∫£ cho lo·∫°i c√¢u h·ªèi SQL"""
        descriptions = {
            "ADDRESS": "v·ªÅ ƒë·ªãa ƒëi·ªÉm b√°n",
            "PRICE": "v·ªÅ gi√°",
            "COUNT": "v·ªÅ s·ªë l∆∞·ª£ng"
        }
        return descriptions.get(sql_query_type, "")

    def _format_sql_results(self, sql_query_type, product_name, sql_results):
        """Format k·∫øt qu·∫£ SQL d·ª±a tr√™n lo·∫°i c√¢u h·ªèi"""
        if sql_query_type == "ADDRESS":
            # Format k·∫øt qu·∫£ cho c√¢u h·ªèi v·ªÅ ƒë·ªãa ch·ªâ
            formatted_results = f"--- Th√¥ng tin ƒë·ªãa ƒëi·ªÉm b√°n s·∫£n ph·∫©m: {product_name} ---\n\n"

            # Gom nh√≥m theo s·∫£n ph·∫©m
            products_info = {}
            for result in sql_results:
                product = result.get("product_name", "")
                if product not in products_info:
                    products_info[product] = {
                        "price": result.get("price", "N/A"),
                        "locations": []
                    }

                if "address" in result and result["address"]:
                    location = {
                        "address": result["address"],
                        "has_map": result.get("map") and result.get("map") != "None"
                    }
                    products_info[product]["locations"].append(location)

            # Format k·∫øt qu·∫£
            for product, info in products_info.items():
                formatted_results += f"S·∫£n ph·∫©m: {product}\n"
                formatted_results += f"Gi√°: {info['price']}\n\n"

                if info["locations"]:
                    formatted_results += "ƒê·ªãa ƒëi·ªÉm b√°n:\n"
                    for i, location in enumerate(info["locations"]):
                        formatted_results += f"{i + 1}. {location['address']}"
                        if location.get("has_map"):
                            formatted_results += " (C√≥ b·∫£n ƒë·ªì)"
                        formatted_results += "\n"
                else:
                    formatted_results += "Kh√¥ng c√≥ th√¥ng tin v·ªÅ ƒë·ªãa ƒëi·ªÉm b√°n.\n"

        elif sql_query_type == "PRICE":
            # Format k·∫øt qu·∫£ cho c√¢u h·ªèi v·ªÅ gi√°
            formatted_results = f"--- Th√¥ng tin gi√° s·∫£n ph·∫©m: {product_name} ---\n\n"

            # L·∫•y gi√° duy nh·∫•t cho s·∫£n ph·∫©m
            unique_products = {}
            for result in sql_results:
                product = result.get("product_name", "")
                if product not in unique_products:
                    unique_products[product] = result.get("price", "N/A")

            for product, price in unique_products.items():
                formatted_results += f"S·∫£n ph·∫©m: {product}\n"
                formatted_results += f"Gi√°: {price}\n\n"

        elif sql_query_type == "COUNT":
            # Format k·∫øt qu·∫£ cho c√¢u h·ªèi v·ªÅ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo kho·∫£ng gi√°
            formatted_results = f"--- Danh s√°ch s·∫£n ph·∫©m theo y√™u c·∫ßu ---\n\n"
            formatted_results += f"S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t√¨m th·∫•y: {len(sql_results)}\n\n"

            # Gom nh√≥m theo category n·∫øu c·∫ßn
            categories = {}
            for result in sql_results:
                category = result.get("category", "Kh√¥ng x√°c ƒë·ªãnh")
                if category not in categories:
                    categories[category] = []

                categories[category].append({
                    "product_name": result.get("product_name", ""),
                    "price": result.get("price", "N/A")
                })

            # Format k·∫øt qu·∫£ theo category
            for category, products in categories.items():
                category_display = {
                    "smartphone": "ƒêi·ªán tho·∫°i",
                    "tablet": "M√°y t√≠nh b·∫£ng",
                    "laptop": "Laptop",
                    "earphone": "Tai nghe",
                    "speaker": "Loa",
                    "watch": "ƒê·ªìng h·ªì"
                }.get(category, category)

                formatted_results += f"--- {category_display} ---\n"
                for i, product in enumerate(products):
                    formatted_results += f"{i + 1}. {product['product_name']} - {product['price']}\n"
                formatted_results += "\n"

        else:
            # Format m·∫∑c ƒë·ªãnh
            formatted_results = f"--- K·∫øt qu·∫£ t√¨m ki·∫øm cho: {product_name} ---\n\n"
            for i, result in enumerate(sql_results):
                formatted_results += f"K·∫øt qu·∫£ {i + 1}:\n"
                for key, value in result.items():
                    if key != "map":  # Kh√¥ng hi·ªÉn th·ªã m√£ HTML c·ªßa b·∫£n ƒë·ªì
                        formatted_results += f"{key}: {value}\n"
                formatted_results += "\n"

        return formatted_results

    def handle_specific_hybrid_query(self, original_query, clarified_query):
        """X·ª≠ l√Ω c√¢u h·ªèi k·∫øt h·ª£p c·∫£ vector search v√† SQL query"""
        # 1. Tr√≠ch xu·∫•t t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi
        product_name = self.extract_product_name(clarified_query)
        print(f"T√™n s·∫£n ph·∫©m ƒë∆∞·ª£c tr√≠ch xu·∫•t (HYBRID): {product_name}")

        # 2. X√°c ƒë·ªãnh c√°c tr∆∞·ªùng th√¥ng tin c·∫ßn l·∫•y
        fields = self.identify_specific_fields(clarified_query)
        print(f"C√°c tr∆∞·ªùng th√¥ng tin c·∫ßn l·∫•y (HYBRID): {fields}")

        # 3. Th·ª±c hi·ªán song song c·∫£ 2 lo·∫°i truy v·∫•n

        # 3.1. T√¨m ki·∫øm vector
        product_search_results = self.perform_semantic_search(product_name, "product_name", top_k=3)

        if not product_search_results:
            return {
                "original_query": original_query,
                "clarified_query": clarified_query,
                "query_type": "SPECIFIC-HYBRID",
                "response": f"Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m {product_name}.",
                "product_name": product_name,
                "fields": fields,
                "raw_results": {}
            }

        best_match = product_search_results[0]
        actual_product_name = best_match["product_name"]
        print(f"S·∫£n ph·∫©m ph√π h·ª£p nh·∫•t (HYBRID): {actual_product_name}")

        # Thu th·∫≠p th√¥ng tin t·ª´ c√°c tr∆∞·ªùng vector
        # Thu th·∫≠p th√¥ng tin t·ª´ c√°c tr∆∞·ªùng vector b·∫±ng query tr·ª±c ti·∫øp
        field_results = {}
        for field in fields:
            try:
                collection = self.collections[field]

                query_expr = f'product_name == "{actual_product_name}"'
                print(f"Truy v·∫•n hybrid tr·ª±c ti·∫øp collection {field}: {query_expr}")

                results = collection.query(
                    expr=query_expr,
                    output_fields=["product_name", "chunk_id", "text_data"]
                )

                if results:
                    field_results[field] = results[0]["text_data"]
                    print(f"T√¨m th·∫•y th√¥ng tin {field} cho {actual_product_name}")
                else:
                    print(f"Kh√¥ng t√¨m th·∫•y th√¥ng tin {field} cho {actual_product_name}")

                    # Th·ª≠ fallback d√πng semantic search n·∫øu c·∫ßn
                    field_search = self.perform_semantic_search(actual_product_name, field, top_k=3)
                    for result in field_search:
                        if result["product_name"] == actual_product_name:
                            field_results[field] = result["text_data"]
                            print(f"T√¨m th·∫•y th√¥ng tin {field} b·∫±ng semantic search")
                            break

                    if field not in field_results:
                        field_results[field] = f"Kh√¥ng t√¨m th·∫•y th√¥ng tin {field} cho s·∫£n ph·∫©m {actual_product_name}"
            except Exception as e:
                print(f"L·ªói truy v·∫•n hybrid collection {field}: {e}")
                field_results[field] = f"Kh√¥ng th·ªÉ l·∫•y th√¥ng tin {field}"

        # 3.2. Th·ª±c hi·ªán truy v·∫•n SQL
        sql_results = self.execute_sql_query(clarified_query, actual_product_name)

        # 4. T·ªï ch·ª©c k·∫øt qu·∫£ vector ƒë·ªÉ hi·ªÉn th·ªã
        vector_formatted_results = f"--- Th√¥ng tin s·∫£n ph·∫©m: {actual_product_name} ---\n\n"
        for field, text in field_results.items():
            field_display = {
                "product_info": "Th√¥ng tin s·∫£n ph·∫©m",
                "warranty": "B·∫£o h√†nh",
                "technical": "Th√¥ng s·ªë k·ªπ thu·∫≠t",
                "feature": "T√≠nh nƒÉng n·ªïi b·∫≠t",
                "content": "M√¥ t·∫£ chi ti·∫øt",
                "full_promotion": "Khuy·∫øn m√£i"
            }.get(field, field.replace("_", " ").title())

            vector_formatted_results += f"### {field_display}:\n{text}\n\n"

        # 5. T·ªï ch·ª©c k·∫øt qu·∫£ SQL ƒë·ªÉ hi·ªÉn th·ªã
        sql_formatted_results = ""
        if sql_results:
            sql_formatted_results = f"--- Th√¥ng tin gi√°/ƒë·ªãa ƒëi·ªÉm c·ªßa s·∫£n ph·∫©m: {actual_product_name} ---\n\n"

            # Gom nh√≥m theo s·∫£n ph·∫©m
            products_info = {}
            for result in sql_results:
                product = result.get("product_name", "")
                if product not in products_info:
                    products_info[product] = {
                        "price": result.get("price", "N/A"),
                        "locations": []
                    }

                if "address" in result and result["address"]:
                    location = {
                        "address": result["address"],
                        "map": result.get("map", "")
                    }
                    products_info[product]["locations"].append(location)

            # Format k·∫øt qu·∫£ cho t·ª´ng s·∫£n ph·∫©m
            for product, info in products_info.items():
                sql_formatted_results += f"Gi√°: {info['price']}\n\n"

                if info["locations"]:
                    sql_formatted_results += "ƒê·ªãa ƒëi·ªÉm b√°n:\n"
                    for i, location in enumerate(info["locations"]):
                        sql_formatted_results += f"{i + 1}. {location['address']}\n"
                else:
                    sql_formatted_results += "Kh√¥ng c√≥ th√¥ng tin v·ªÅ ƒë·ªãa ƒëi·ªÉm b√°n.\n"
        else:
            sql_formatted_results = "Kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ gi√° ho·∫∑c ƒë·ªãa ƒëi·ªÉm b√°n s·∫£n ph·∫©m n√†y."

        # PH·∫¶N C·∫¶N C·∫¢I THI·ªÜN - Ph√¢n t√≠ch c√¢u h·ªèi ƒë·ªÉ x√°c ƒë·ªãnh tr·ªçng s·ªë ∆∞u ti√™n
        vector_keywords = ["th√¥ng s·ªë", "t√≠nh nƒÉng", "ƒë√°nh gi√°", "b·∫£o h√†nh", "khuy·∫øn m√£i", "review", "c√≥ g√¨ hay"]
        sql_keywords = ["gi√°", "c·ª≠a h√†ng", "ƒë·ªãa ƒëi·ªÉm", "b√°n ·ªü ƒë√¢u", "mua ·ªü ƒë√¢u", "bao nhi√™u ti·ªÅn"]

        # X√°c ƒë·ªãnh ƒë·ªô ∆∞u ti√™n d·ª±a tr√™n v·ªã tr√≠ xu·∫•t hi·ªán trong c√¢u h·ªèi
        vector_priority = False
        sql_priority = False

        # X√°c ƒë·ªãnh th·ª© t·ª± ∆∞u ti√™n d·ª±a tr√™n v·ªã tr√≠ xu·∫•t hi·ªán t·ª´ kh√≥a ƒë·∫ßu ti√™n
        vector_position = float('inf')
        sql_position = float('inf')

        for keyword in vector_keywords:
            pos = clarified_query.lower().find(keyword)
            if pos != -1 and pos < vector_position:
                vector_position = pos
                vector_priority = True

        for keyword in sql_keywords:
            pos = clarified_query.lower().find(keyword)
            if pos != -1 and pos < sql_position:
                sql_position = pos
                sql_priority = True

        # X√°c ƒë·ªãnh th·ª© t·ª± ∆∞u ti√™n (th·ª© t·ª± xu·∫•t hi·ªán tr∆∞·ªõc ƒë∆∞·ª£c ∆∞u ti√™n)
        priority_instruction = ""
        if vector_priority and sql_priority:
            if vector_position < sql_position:
                priority_instruction = "Trong c√¢u tr·∫£ l·ªùi, h√£y ∆∞u ti√™n th√¥ng tin v·ªÅ ƒë·∫∑c ƒëi·ªÉm, t√≠nh nƒÉng s·∫£n ph·∫©m tr∆∞·ªõc, sau ƒë√≥ m·ªõi ƒë·∫øn th√¥ng tin v·ªÅ gi√° v√† ƒë·ªãa ƒëi·ªÉm b√°n."
            else:
                priority_instruction = "Trong c√¢u tr·∫£ l·ªùi, h√£y ∆∞u ti√™n th√¥ng tin v·ªÅ gi√° v√† ƒë·ªãa ƒëi·ªÉm b√°n tr∆∞·ªõc, sau ƒë√≥ m·ªõi ƒë·∫øn th√¥ng tin v·ªÅ ƒë·∫∑c ƒëi·ªÉm, t√≠nh nƒÉng s·∫£n ph·∫©m."

        # X√°c ƒë·ªãnh xem c√≥ b·∫£n ƒë·ªì kh√¥ng
        has_map = any("map" in result and result["map"] and result["map"] != "None" for result in sql_results)
        map_instruction = "Cu·ªëi c√πng, h√£y nh·∫Øc ng∆∞·ªùi d√πng r·∫±ng h·ªç c√≥ th·ªÉ xem v·ªã tr√≠ c·ª≠a h√†ng tr√™n b·∫£n ƒë·ªì b√™n d∆∞·ªõi." if has_map else ""

        # 6. T·∫°o c√¢u tr·∫£ l·ªùi k·∫øt h·ª£p v·ªõi h∆∞·ªõng d·∫´n ∆∞u ti√™n
        prompt = f"""
        T·∫°o c√¢u tr·∫£ l·ªùi k·∫øt h·ª£p th√¥ng tin s·∫£n ph·∫©m v√† gi√°/ƒë·ªãa ƒëi·ªÉm b√°n:

        C√¢u h·ªèi g·ªëc: "{original_query}"
        C√¢u h·ªèi ƒë√£ l√†m r√µ: "{clarified_query}"
        S·∫£n ph·∫©m: {actual_product_name}
        C√°c tr∆∞·ªùng th√¥ng tin: {", ".join(fields)}

        K·∫øt qu·∫£ Vector:
        {vector_formatted_results}

        K·∫øt qu·∫£ SQL:
        {sql_formatted_results}

        {priority_instruction}

        H√£y t·∫°o m·ªôt c√¢u tr·∫£ l·ªùi to√†n di·ªán k·∫øt h·ª£p c·∫£ th√¥ng tin v·ªÅ s·∫£n ph·∫©m v√† gi√°/ƒë·ªãa ƒëi·ªÉm b√°n. C√¢u tr·∫£ l·ªùi c·∫ßn:
        1. M·ªü ƒë·∫ßu b·∫±ng vi·ªác x√°c nh·∫≠n s·∫£n ph·∫©m ng∆∞·ªùi d√πng ƒëang h·ªèi
        2. Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ s·∫£n ph·∫©m theo y√™u c·∫ßu trong c√¢u h·ªèi
        3. Cung c·∫•p th√¥ng tin v·ªÅ gi√° (n·∫øu c√≥ trong k·∫øt qu·∫£ SQL)
        4. Li·ªát k√™ c√°c ƒë·ªãa ƒëi·ªÉm b√°n (n·∫øu c√≥ trong k·∫øt qu·∫£ SQL)
        5. K·∫øt th√∫c b·∫±ng m·ªôt t√≥m t·∫Øt ng·∫Øn g·ªçn

        {map_instruction}

        C√¢u tr·∫£ l·ªùi ph·∫£i ƒë∆∞·ª£c t·ªï ch·ª©c t·ªët, h·ªØu √≠ch v√† ƒë√°p ·ª©ng ƒë·∫ßy ƒë·ªß y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng. T·ªëi ƒëa 800 t·ª´.
        """

        response = self.call_openai(prompt, temperature=0.7)

        return {
            "original_query": original_query,
            "clarified_query": clarified_query,
            "query_type": "SPECIFIC-HYBRID",
            "response": response,
            "product_name": actual_product_name,
            "fields": fields,
            "has_map": has_map,  # Th√™m flag cho bi·∫øt c√≥ b·∫£n ƒë·ªì hay kh√¥ng
            "raw_vector_results": field_results,
            "raw_sql_results": sql_results
        }

    def process_query(self, user_query):
        """X·ª≠ l√Ω c√¢u h·ªèi ng∆∞·ªùi d√πng - ƒëi·ªÉm v√†o ch√≠nh c·ªßa h·ªá th·ªëng"""
        print(f"C√¢u h·ªèi ƒë·∫ßu v√†o ng∆∞·ªùi d√πng: {user_query}")

        try:
            # 1. L√†m r√µ c√¢u h·ªèi
            clarified_query = self.clarify_query(user_query)
            print(f"C√¢u h·ªèi ƒë√£ l√†m r√µ: {clarified_query}")

            # 2. Ph√¢n lo·∫°i domain (RELATED/UNRELATED)
            query_domain = self.classify_query_domain(clarified_query)
            print(f"Domain truy v·∫•n: {query_domain}")

            if query_domain == "UNRELATED":
                return self.handle_unrelated_query(user_query, clarified_query)

            # 3. Ph√¢n lo·∫°i c√¢u h·ªèi theo c·∫•u tr√∫c m·ªõi
            query_type = self.classify_query(clarified_query)
            print(f"Lo·∫°i truy v·∫•n: {query_type}")

            # 4. X·ª≠ l√Ω theo lo·∫°i c√¢u h·ªèi
            if query_type == "GENERAL":
                # C√¢u h·ªèi chung chung v·ªÅ nhi·ªÅu s·∫£n ph·∫©m
                return self.handle_general_query(user_query, clarified_query)

            elif query_type == "SPECIFIC-VECTOR":
                # C√¢u h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ, c·∫ßn th√¥ng tin t·ª´ vector store
                return self.handle_specific_vector_query(user_query, clarified_query)

            elif query_type == "SPECIFIC-SQL":
                # C√¢u h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ, c·∫ßn th√¥ng tin t·ª´ SQL (gi√°, ƒë·ªãa ƒëi·ªÉm)
                return self.handle_specific_sql_query(user_query, clarified_query)

            elif query_type == "SPECIFIC-HYBRID":
                # C√¢u h·ªèi v·ªÅ m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ, c·∫ßn k·∫øt h·ª£p c·∫£ hai lo·∫°i th√¥ng tin
                return self.handle_specific_hybrid_query(user_query, clarified_query)

            else:
                # Lo·∫°i truy v·∫•n kh√¥ng x√°c ƒë·ªãnh, m·∫∑c ƒë·ªãnh x·ª≠ l√Ω nh∆∞ c√¢u h·ªèi chung
                print(f"Lo·∫°i truy v·∫•n kh√¥ng x√°c ƒë·ªãnh: {query_type}, x·ª≠ l√Ω m·∫∑c ƒë·ªãnh")
                return self.handle_general_query(user_query, clarified_query)

        except Exception as e:
            error_message = f"ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω truy v·∫•n: {str(e)}"
            print(error_message)
            return {
                "original_query": user_query,
                "clarified_query": user_query,
                "query_type": "ERROR",
                "response": f"Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n: {str(e)}. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒë·∫∑t c√¢u h·ªèi kh√°c.",
                "raw_results": error_message
            }

    def close(self):
        """ƒê√≥ng t·∫•t c·∫£ c√°c k·∫øt n·ªëi"""
        if hasattr(self, "sql_conn") and self.sql_conn:
            self.sql_conn.close()
            print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi SQL")

        try:
            # ƒê√≥ng k·∫øt n·ªëi Milvus n·∫øu c√≥
            from pymilvus import connections
            connections.disconnect("default")
            print("ƒê√£ ƒë√≥ng k·∫øt n·ªëi Milvus")
        except Exception as e:
            print(f"L·ªói khi ƒë√≥ng k·∫øt n·ªëi Milvus: {e}")

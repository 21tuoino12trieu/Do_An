from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import concurrent.futures  # ƒê·ªÉ ch·∫°y song song
import time
import json


# H√†m cu·ªôn ƒë·∫øn ph·∫ßn t·ª≠
def scroll_into_view(driver, element):
    driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", element)
    time.sleep(1)


# H√†m x·ª≠ l√Ω t·ª´ng trang s·∫£n ph·∫©m
def scrape_product_links(brand_link):
    driver = webdriver.Chrome()
    driver.maximize_window()
    driver.get(brand_link)

    print(f"üîÑ ƒêang l·∫•y s·∫£n ph·∫©m t·ª´ th∆∞∆°ng hi·ªáu: {brand_link}")

    # Ch·ªù trang t·∫£i xong
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

    # **Nh·∫•n "Xem th√™m s·∫£n ph·∫©m" cho ƒë·∫øn khi h·∫øt**
    while True:
        try:
            button_show_more_product = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".button__show-more-product"))
            )
            if button_show_more_product.is_displayed() and button_show_more_product.is_enabled():
                scroll_into_view(driver, button_show_more_product)
                driver.execute_script("arguments[0].click();", button_show_more_product)
                print("‚úÖ ƒê√£ click 'Xem th√™m s·∫£n ph·∫©m'")
                WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.CSS_SELECTOR, ".product-item")))
            else:
                break
        except:
            print("‚ùå Kh√¥ng c√≤n n√∫t 'Xem th√™m s·∫£n ph·∫©m'")
            break

    # **L·∫•y danh s√°ch s·∫£n ph·∫©m**
    product_elements = driver.find_elements(By.CSS_SELECTOR, ".product-item a")
    product_links = [product.get_attribute("href") for product in product_elements if product.get_attribute("href")]
    # **Duy·ªát t·ª´ng s·∫£n ph·∫©m**
    for product_link in product_links:
        try:
            print(f"üìå ƒêang m·ªü s·∫£n ph·∫©m: {product_link}")

            # M·ªü tab m·ªõi
            driver.execute_script("window.open(arguments[0]);", product_link)
            driver.switch_to.window(driver.window_handles[1])  # Chuy·ªÉn sang tab m·ªõi

            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, "body")))

            # **T√¨m s·∫£n ph·∫©m con (dung l∆∞·ª£ng kh√°c)**
            list_links_capacity = driver.find_elements(By.CSS_SELECTOR, ".box-linked .list-linked a")

            if list_links_capacity:
                # L·∫•y danh s√°ch s·∫£n ph·∫©m con n·∫øu c√≥
                product_links_capacity = [link.get_attribute("href") for link in list_links_capacity]
                all_product_links.extend(product_links_capacity)
                print(f"üîπ ƒê√£ t√¨m th·∫•y {len(product_links_capacity)} s·∫£n ph·∫©m con.")
            else:
                # N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m con, l∆∞u s·∫£n ph·∫©m g·ªëc
                all_product_links.append(product_link)

            # ƒê√≥ng tab s·∫£n ph·∫©m & quay l·∫°i danh s√°ch
            driver.close()
            driver.switch_to.window(driver.window_handles[0])  # Quay l·∫°i tab c≈©

            # **ƒê√ìNG POP UP HI·ªÜN L√äN ƒêƒÇNG K√ç MEMBER**
            try:
                close_button = WebDriverWait(driver, 1).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, ".cancel-button-top"))
                )
                close_button.click()
                print("‚úÖ ƒê√£ ƒë√≥ng form ƒëƒÉng k√Ω!")
            except:
                print("‚ö† Kh√¥ng t√¨m th·∫•y form ƒëƒÉng k√Ω ho·∫∑c kh√¥ng th·ªÉ ƒë√≥ng.")

        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m {product_link}: {e}")
            driver.close()
            driver.switch_to.window(driver.window_handles[0])  # ƒê·∫£m b·∫£o v·ªÅ l·∫°i tab ch√≠nh
    print(f"‚úÖ ƒê√£ l·∫•y {len(all_product_links)} s·∫£n ph·∫©m t·ª´ {brand_link}")
    driver.quit()
    return product_links


# **Kh·ªüi ƒë·ªông tr√¨nh duy·ªát ƒë·ªÉ l·∫•y danh s√°ch th∆∞∆°ng hi·ªáu**
driver = webdriver.Chrome()
driver.maximize_window()
homepage_url = "https://cellphones.com.vn/do-choi-cong-nghe/dong-ho-thong-minh-nghe-goi.html"
driver.get(homepage_url)

WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.CSS_SELECTOR, ".brands__content")))

brand_elements = driver.find_elements(By.CSS_SELECTOR, ".brands__content .list-brand__item")
brand_links = [brand.get_attribute("href") for brand in brand_elements]

driver.quit()  # ƒê√≥ng tr√¨nh duy·ªát ch√≠nh ƒë·ªÉ tr√°nh l√£ng ph√≠ t√†i nguy√™n

# **Ch·∫°y song song vi·ªác l·∫•y d·ªØ li·ªáu t·ª´ c√°c th∆∞∆°ng hi·ªáu**
all_product_links = []

with concurrent.futures.ThreadPoolExecutor(max_workers=7) as executor:
    futures = {executor.submit(scrape_product_links, link): link for link in brand_links}

    for future in concurrent.futures.as_completed(futures):
        try:
            product_links = future.result()

            all_product_links.extend(product_links)
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m t·ª´ m·ªôt th∆∞∆°ng hi·ªáu: {e}")

# **L∆∞u v√†o file JSON**
with open("C:\\Users\\dangn\\PycharmProjects\\Law\\crawldata\\multi_threads_watch_product_links.json", "w", encoding="utf-8") as f:
    json.dump(all_product_links, f, indent=4, ensure_ascii=False)

print(f"üéâ Ho√†n th√†nh! ƒê√£ thu th·∫≠p {len(all_product_links)} s·∫£n ph·∫©m.")

import streamlit as st
from direct_rag import DirectRAG
import re
import time

st.set_page_config(
    page_title="Assistant T∆∞ V·∫•n Thi·∫øt B·ªã Di ƒê·ªông",
    page_icon="üì±",
    layout="wide"
)


@st.cache_resource
def get_rag_system():
    return DirectRAG()


# Kh·ªüi t·∫°o session state
if "messages" not in st.session_state:
    st.session_state.messages = []
    st.session_state.rag = get_rag_system()

st.title("ü§ñ Assistant T∆∞ V·∫•n Thi·∫øt B·ªã Di ƒê·ªông")
st.subheader("H√£y h·ªèi t√¥i v·ªÅ c√°c s·∫£n ph·∫©m ƒëi·ªán t·ª≠!")

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

        # Ki·ªÉm tra xem c√≥ m√£ nh√∫ng b·∫£n ƒë·ªì kh√¥ng v√† hi·ªÉn th·ªã n√≥
        if message["role"] == "assistant" and "<iframe" in message["content"]:
            map_html = re.search(r'(<iframe.*?</iframe>)', message["content"], re.DOTALL)
            if map_html:
                st.components.v1.html(map_html.group(1), height=400)

# Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng
prompt = st.chat_input("H·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨ v·ªÅ thi·∫øt b·ªã di ƒë·ªông...")

if prompt:
    # Th√™m c√¢u h·ªèi ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})

    # Hi·ªÉn th·ªã c√¢u h·ªèi ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.markdown(prompt)

    # Hi·ªÉn th·ªã tr·∫°ng th√°i ƒëang x·ª≠ l√Ω
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        message_placeholder.markdown("ü§î ƒêang suy nghƒ©...")

        try:
            # X·ª≠ l√Ω c√¢u h·ªèi ng∆∞·ªùi d√πng
            start_time = time.time()
            result = st.session_state.rag.process_query(prompt)
            response_time = time.time() - start_time

            # L·∫•y ph·∫£n h·ªìi t·ª´ k·∫øt qu·∫£
            response = result["response"]

            # T·∫°o th√¥ng tin hi·ªÉn th·ªã ·ªü footer
            query_type_display = {
                "GENERAL": "C√¢u h·ªèi chung v·ªÅ nhi·ªÅu s·∫£n ph·∫©m",
                "SPECIFIC-VECTOR": "C√¢u h·ªèi v·ªÅ th√¥ng tin s·∫£n ph·∫©m c·ª• th·ªÉ",
                "SPECIFIC-SQL": "C√¢u h·ªèi v·ªÅ gi√°/ƒë·ªãa ƒëi·ªÉm b√°n",
                "SPECIFIC-HYBRID": "C√¢u h·ªèi k·∫øt h·ª£p th√¥ng tin v√† gi√°/ƒë·ªãa ƒëi·ªÉm",
                "ERROR": "L·ªói x·ª≠ l√Ω"
            }

            query_type = result.get("query_type", "ERROR")
            query_type_text = query_type_display.get(query_type, query_type)

            # T·∫°o th√¥ng tin b·ªï sung d·ª±a tr√™n lo·∫°i truy v·∫•n
            additional_info = ""
            if query_type == "GENERAL":
                if "field" in result:
                    field_display = {
                        "product_name": "T√™n s·∫£n ph·∫©m",
                        "product_info": "Th√¥ng tin s·∫£n ph·∫©m",
                        "warranty": "B·∫£o h√†nh",
                        "technical": "Th√¥ng s·ªë k·ªπ thu·∫≠t",
                        "feature": "T√≠nh nƒÉng n·ªïi b·∫≠t",
                        "content": "M√¥ t·∫£ chi ti·∫øt",
                        "full_promotion": "Khuy·∫øn m√£i"
                    }.get(result["field"], result["field"])
                    additional_info = f" ‚Ä¢ Tr∆∞·ªùng t√¨m ki·∫øm: {field_display}"
            elif "SPECIFIC" in query_type:
                if "product_name" in result:
                    additional_info = f" ‚Ä¢ S·∫£n ph·∫©m: {result['product_name']}"

            footer = f"\n\n---\n*Th·ªùi gian x·ª≠ l√Ω: {response_time:.2f} gi√¢y ‚Ä¢ Lo·∫°i truy v·∫•n: {query_type_text}{additional_info}*"

            # Th√™m footer v√†o ph·∫£n h·ªìi
            full_response = response + footer

            # C·∫≠p nh·∫≠t placeholder v·ªõi c√¢u tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß
            message_placeholder.markdown(full_response)

            # Th√™m c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
            st.session_state.messages.append({"role": "assistant", "content": full_response})

        except Exception as e:
            error_message = f"X·∫£y ra l·ªói: {str(e)}"
            message_placeholder.markdown(error_message)
            st.session_state.messages.append({"role": "assistant", "content": error_message})

# Thanh b√™n ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin b·ªï sung
with st.sidebar:
    st.header("Th√¥ng tin")
    st.write("H·ªá th·ªëng RAG t∆∞ v·∫•n thi·∫øt b·ªã di ƒë·ªông")
    st.write("B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:")

    st.subheader("C√¢u h·ªèi chung chung")
    st.write("- T∆∞ v·∫•n tai nghe ch·ªëng ·ªìn t·ªët")
    st.write("- T∆∞ v·∫•n ƒëi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp")
    st.write("- ƒê·ªÅ xu·∫•t laptop cho sinh vi√™n IT")

    st.subheader("C√¢u h·ªèi c·ª• th·ªÉ")
    st.write("- Th√¥ng s·ªë k·ªπ thu·∫≠t c·ªßa iPhone 13 Pro Max")
    st.write("- Gi√° c·ªßa Samsung Galaxy S22 Ultra")
    st.write("- ƒê·ªãa ƒëi·ªÉm b√°n tai nghe SoundPeats T3 Pro")
    st.write("- Apple Watch Series 7 c√≥ t√≠nh nƒÉng g√¨ n·ªïi b·∫≠t?")

    st.divider()

    if st.button("X√≥a l·ªãch s·ª≠ chat", type="primary"):
        st.session_state.messages = []
        st.rerun()
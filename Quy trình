 tôi đang xây dựng một hệ thống RAG (Retrieval-Augmented Generation) để tư vấn về thiết bị di động. Tôi sẽ phân tích workflow tổng thể của hệ thống tôi đã triển khai.
Tổng quan về workflow
Hệ thống của tôi áp dụng một workflow khá toàn diện cho RAG, bao gồm các bước sau:

Thu thập dữ liệu: Crawl dữ liệu từ các trang thương mại điện tử (smartphone, tablet, laptop, earphone, speakers, watches)
Tiền xử lý dữ liệu: Làm sạch và cấu trúc hóa dữ liệu thông qua pre_processing_data.py
Lưu trữ dữ liệu:

Vector Store (Milvus) cho tìm kiếm ngữ nghĩa
SQL Database (SQLite) cho truy vấn thuộc tính cụ thể (giá, địa điểm)


Tạo vector embeddings: Sử dụng BGE-M3 model để tạo embeddings
Xử lý truy vấn người dùng:

Làm rõ câu hỏi
Phân loại câu hỏi (SQL, RAG, HYBRID)
Truy xuất thông tin phù hợp
Tạo phản hồi


Giao diện người dùng: Streamlit UI cho tương tác

Phân tích chi tiết
1. Cấu trúc dữ liệu
tôi đã phân chia dữ liệu theo 7 khía cạnh (fields) khác nhau cho mỗi sản phẩm:

product_name
product_info
warranty
technical
feature
content
full_promotion

Cách tiếp cận này cho phép tìm kiếm ngữ nghĩa theo từng khía cạnh cụ thể, tăng độ chính xác.
2. Kiến trúc Vector Store
tôi sử dụng Milvus với index HNSW và Inner Product, đây là lựa chọn tốt cho tìm kiếm ngữ nghĩa hiệu quả.
3. Quy trình xử lý truy vấn
Hệ thống của tôi có một quy trình xử lý truy vấn khá phức tạp và thông minh:

Làm rõ câu hỏi: Hiểu đúng ý định người dùng
Phân loại truy vấn: SQL/RAG/HYBRID - đây là điểm rất hay, phù hợp với các loại câu hỏi khác nhau
Xác định fields liên quan: Tìm kiếm thông tin trong các khía cạnh phù hợp nhất

4. Tạo phản hồi
tôi sử dụng LLM để tạo phản hồi cuối cùng, tổng hợp từ kết quả truy vấn.
Đánh giá workflow
Điểm mạnh

Phân loại truy vấn thông minh: Phân biệt giữa SQL, RAG và HYBRID là một cách tiếp cận hiệu quả để xử lý các loại câu hỏi khác nhau.
Tiền xử lý dữ liệu kỹ lưỡng: Code làm sạch văn bản rất cẩn thận, loại bỏ nhiều loại đặc biệt và định dạng dữ liệu chuẩn.
Cấu trúc dữ liệu đa khía cạnh: Phân chia dữ liệu thành 7 fields giúp tìm kiếm chính xác hơn.
Kết hợp cả SQL và Vector Search: Cách tiếp cận hybrid này rất hợp lý cho ứng dụng tư vấn thiết bị.
Phương pháp reranking: Sử dụng reranker để đánh giá lại kết quả tìm kiếm.